; Primitive atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; fnction definition
; (\ {formal list...} {body...} )
(def {fn} (\ {h t} { def (head h) (\ (tail h) t) }))

; Curry (and uncurry)
; (fn {unpack f l} {
;	eval (join (list f) l)
;})
;(fn {pack f & xs} {f xs})
;(def {curry} unpack)
;(def {uncurry} pack)

; Logical operators
;(fn {not x} {- 1 x})
;(fn {or x y} {+ x y}) ; nonzero will yield nonzero
;(fn {and x y} (* x y)) ; 0 will make it go to 0

; TODO: index into list, list length, last item, subset of items, drop n items, split
;(fn {len l} {
;    if (== l nil)
;        {0}
;        {+ 1 (len (tail l))}
;})

;; Examples
; run (print 1)
; spawn "adder" (\ {x y} {+ x y})
; print (<- "adder" {1 2})
